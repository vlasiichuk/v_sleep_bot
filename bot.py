# -*- coding: utf-8 -*-

from aiogram import Bot, Dispatcher, types
import logging
import sqlite3
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from aiogram.filters import CommandStart
import os


API_TOKEN = os.getenv("API_TOKEN")

logging.basicConfig(level=logging.INFO)

# 1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ Bot
bot = Bot(token=API_TOKEN)

# 2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ MemoryStorage –¥–ª—è FSM
storage = MemoryStorage()

# 3. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Dispatcher –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
dp = Dispatcher(storage=storage)

# –ú–∞–ø—ñ–Ω–≥ ID –Ω–∞ —ñ–º–µ–Ω–∞
user_mapping = {
    385386930: "–¢–∞–Ω—è",
    314376802: "–í–æ–≤–∞",
    519282184: "–ú–∏—Ä–æ—Å–ª–∞–≤–∞"
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def create_connection():
    conn = sqlite3.connect('sleep_data.db')
    return conn

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
def create_buttons(current_state, user_id):
    if current_state == "sleeping":
        return ReplyKeyboardMarkup(
            keyboard=[[
                KeyboardButton(text="üåû –ü—Ä–æ–∫–∏–Ω—É–≤—Å—è")],
                [KeyboardButton(text="üìú –Ü—Å—Ç–æ—Ä—ñ—è")]
            ],
            resize_keyboard=True
        )
    elif current_state == "awake":
        return ReplyKeyboardMarkup(
            keyboard=[[
                KeyboardButton(text="üåô –ó–∞—Å–Ω—É–≤")],
                [KeyboardButton(text="üìú –Ü—Å—Ç–æ—Ä—ñ—è")]
            ],
            resize_keyboard=True
        )
    else:
        return ReplyKeyboardMarkup(
            keyboard=[[
                KeyboardButton(text="üåô –ó–∞—Å–Ω—É–≤")],
                [KeyboardButton(text="üìú –Ü—Å—Ç–æ—Ä—ñ—è")]
            ],
            resize_keyboard=True
        )

def create_table():
    conn = create_connection()
    cursor = conn.cursor()

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—è–∫—â–æ —â–µ –Ω–µ —ñ—Å–Ω—É—î)
    cursor.execute(''' 
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY
        )
    ''')

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –∑–∞–ø–∏—Å—É –ª–æ–≥—ñ–≤ —Å–Ω—É (—è–∫—â–æ —â–µ –Ω–µ —ñ—Å–Ω—É—î)
    cursor.execute(''' 
        CREATE TABLE IF NOT EXISTS sleep_log (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            state TEXT,
            timestamp TEXT,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')

    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def register_user(user_id, bot, message):
    conn = create_connection()
    cursor = conn.cursor()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –±–∞–∑—ñ
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    user_exists = cursor.fetchone()

    if user_exists:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î, –≤–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        # logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {user_id} –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π.")
        await message.answer("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ.")
    else:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π, —Ç–æ –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ
        cursor.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
        conn.commit()
        # logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {user_id} —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π.")
        await message.answer("–í—ñ—Ç–∞—î–º–æ! –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")

    conn.close()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ID –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
@dp.message(CommandStart())  
async def start(message: types.Message):
    if message.from_user.id not in user_mapping:
        await message.answer("–¶–µ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –±–æ—Ç. –ù–µ–º–∞ —á–æ–≥–æ —Ç—É—Ç –ª–∞–∑–∏—Ç–∏")
        return

    create_table()  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
    await register_user(message.from_user.id, bot, message)  # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    user_id = message.from_user.id
    username = user_mapping.get(user_id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")

    conn = create_connection()
    cursor = conn.cursor()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    cursor.execute("SELECT state FROM sleep_log ORDER BY timestamp DESC LIMIT 1")
    last_state = cursor.fetchone()

    if last_state and last_state[0] == "sleeping":
        markup = create_buttons("sleeping", user_id)
    else:
        markup = create_buttons(None, user_id)

    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {username}! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Å–Ω—É –≤–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ—ñ–∫—Å–∞—Ü—ñ—ó —Å—Ç–∞–Ω—É.",
                         reply_markup=markup)

    conn.close()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def get_all_users():
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    conn.close()
    return [user[0] for user in users]

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
async def notify_users(bot: Bot, message_text: str, exclude_user_id: int):
    conn = create_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()

    # –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π —Å—Ç–≤–æ—Ä–∏–≤ –ø–æ–¥—ñ—é
    initiator_name = user_mapping.get(exclude_user_id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")

    for user in users:
        user_id = user[0]
        if user_id != exclude_user_id:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–∞–Ω —Å–∞–º–µ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                cursor.execute("""
                    SELECT state FROM sleep_log 
                    
                    ORDER BY timestamp DESC LIMIT 1
                """)
                last_state = cursor.fetchone()
    
                if last_state and last_state[0] == "sleeping":
                    markup = create_buttons("sleeping", user_id)
                else:
                    markup = create_buttons("awake", user_id)
    
                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
                await bot.send_message(user_id, f"{initiator_name} {message_text}", reply_markup=markup)
    
            except:
                pass  # –ü—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏

    conn.close()

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ "–ó–∞—Å–Ω—É–≤"
@dp.message(F.text == "üåô –ó–∞—Å–Ω—É–≤")
async def sleeping(message: types.Message):
    user_id = message.from_user.id
    timestamp = datetime.now()
    timestamp_str = timestamp.strftime("%Y-%m-%d %H:%M:%S.%f")

    conn = create_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT state, timestamp FROM sleep_log 
        
        ORDER BY timestamp DESC LIMIT 1
    """)
    last_entry = cursor.fetchone()

    cursor.execute(
        "INSERT INTO sleep_log (user_id, state, timestamp) VALUES (?, ?, ?)",
        (user_id, 'sleeping', timestamp_str)
    )
    conn.commit()
    conn.close()

    duration_str = ""
    if last_entry:
        last_state, last_timestamp = last_entry
        last_time = datetime.strptime(last_timestamp, "%Y-%m-%d %H:%M:%S.%f")
        duration = timestamp - last_time
        hours, remainder = divmod(int(duration.total_seconds()), 3600)
        minutes = remainder // 60

        if hours > 0:
            duration_str = f" –ø—ñ—Å–ª—è {hours}–≥ {minutes:02}—Ö–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"
        else:
            duration_str = f" –ø—ñ—Å–ª—è {minutes}—Ö–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"

    #logging.info(f"User {user_id} selected '–ó–∞—Å–Ω—É–≤' at {timestamp}")

    await notify_users(bot, f"–∑–∞—Ñ—ñ–∫—Å—É–≤–∞–≤, —â–æ –¥–∏—Ç–∏–Ω–∞ –∑–∞—Å–Ω—É–ª–∞{duration_str}.", user_id)
    await message.answer(f"–í–∏ –∑–∞—Ñ—ñ–∫—Å—É–≤–∞–ª–∏, —â–æ –¥–∏—Ç–∏–Ω–∞ –∑–∞—Å–Ω—É–ª–∞{duration_str}.", reply_markup=create_buttons("sleeping", user_id))


# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ "–ü—Ä–æ–∫–∏–Ω—É–≤—Å—è"
@dp.message(F.text == "üåû –ü—Ä–æ–∫–∏–Ω—É–≤—Å—è")
async def awake(message: types.Message):
    user_id = message.from_user.id
    timestamp = datetime.now()
    timestamp_str = timestamp.strftime("%Y-%m-%d %H:%M:%S.%f")

    conn = create_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT state, timestamp FROM sleep_log 
        
        ORDER BY timestamp DESC LIMIT 1
    """)
    last_entry = cursor.fetchone()

    cursor.execute(
        "INSERT INTO sleep_log (user_id, state, timestamp) VALUES (?, ?, ?)",
        (user_id, 'awake', timestamp_str)
    )
    conn.commit()
    conn.close()

    duration_str = ""
    if last_entry:
        last_state, last_timestamp = last_entry
        last_time = datetime.strptime(last_timestamp, "%Y-%m-%d %H:%M:%S.%f")
        duration = timestamp - last_time
        hours, remainder = divmod(int(duration.total_seconds()), 3600)
        minutes = remainder // 60

        if hours > 0:
            duration_str = f" –ø—ñ—Å–ª—è {hours}–≥ {minutes:02}—Ö–≤ —Å–Ω—É"
        else:
            duration_str = f" –ø—ñ—Å–ª—è {minutes}—Ö–≤ —Å–Ω—É"

    #logging.info(f"User {user_id} selected '–ü—Ä–æ–∫–∏–Ω—É–≤—Å—è' at {timestamp}")

    await notify_users(bot, f"–∑–∞—Ñ—ñ–∫—Å—É–≤–∞–≤, —â–æ –¥–∏—Ç–∏–Ω–∞ –ø—Ä–æ–∫–∏–Ω—É–ª–∞—Å—å{duration_str}.", user_id)
    await message.answer(f"–í–∏ –∑–∞—Ñ—ñ–∫—Å—É–≤–∞–ª–∏, —â–æ –¥–∏—Ç–∏–Ω–∞ –ø—Ä–æ–∫–∏–Ω—É–ª–∞—Å—å{duration_str}.", reply_markup=create_buttons("awake", user_id))

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ "–Ü—Å—Ç–æ—Ä—ñ—è"
@dp.message(F.text == "üìú –Ü—Å—Ç–æ—Ä—ñ—è")
async def show_history(message: types.Message):
    user_id = message.from_user.id
   
    create_table()
    conn = create_connection()
    cursor = conn.cursor()

    # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–ø–∏—Å—ñ–≤
    cursor.execute("SELECT user_id, state, timestamp FROM sleep_log ORDER BY timestamp DESC LIMIT 10")
    history = cursor.fetchall()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    cursor.execute("SELECT state FROM sleep_log ORDER BY timestamp DESC LIMIT 1")
    last_state = cursor.fetchone()

    if last_state and last_state[0] == "sleeping":
        markup = create_buttons("sleeping", user_id)
    else:
        markup = create_buttons(None, user_id)

    conn.close()

    if history:
        history_message = "–û—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–ø–∏—Å—ñ–≤:\n"
        history_message += "```\n"  # –ü–æ—á–∞—Ç–æ–∫ monospace-–±–ª–æ–∫—É
        history_message += "| –ß–∞—Å         | –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å | –°—Ç–∞–Ω       | –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á     |\n"
        history_message += "|-------------|------------|------------|----------|\n"

        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
        formatted_history = []
        for user_id_entry, state, timestamp in history:
            formatted_history.append({
                "user_id": user_id_entry,
                "state": state,
                "timestamp": datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S.%f")
            })

        for i, entry in enumerate(formatted_history):
            current_time = entry["timestamp"]
            username = user_mapping.get(entry["user_id"], "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
            state_display = "–ø—Ä–æ–∫–∏–Ω—É–≤—Å—è" if entry["state"] == 'awake' else "–∑–∞—Å–Ω—É–≤"
            adjusted_time = current_time + timedelta(hours=3)
            formatted_time = adjusted_time.strftime("%d.%m %H:%M")

            # –í–∏—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É
            if i + 1 < len(formatted_history):
                next_time = formatted_history[i + 1]["timestamp"]
                duration = current_time - next_time
                hours, remainder = divmod(int(duration.total_seconds()), 3600)
                minutes = remainder // 60
                duration_str = f"{hours}–≥ {minutes:02}—Ö–≤"
            else:
                duration_str = "‚Äî"

            history_message += f"| {formatted_time:<11} | {duration_str:<10} | {state_display:<10} | {username:<8} |\n"

        history_message += "```"
    else:
        history_message = "–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤."

    history_message += f"\n–ö–æ–º–∞–Ω–¥—É –≤–∏–∫–æ–Ω–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –∑ ID: {user_id}"

    #logging.info(f"User {user_id} requested history")

    await message.answer(history_message, reply_markup=markup, parse_mode="Markdown")

# –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
